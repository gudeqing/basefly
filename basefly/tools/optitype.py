from basefly import Argument, Output, Command, Workflow, TopVar

# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9679531/
# optitype在HLA-A,B,C三个基因上的定型准确性最高最稳定


def optitype():
    cmd = Command()
    cmd.meta.name = 'OptiType'
    cmd.meta.version = '1.3.1'
    cmd.meta.source = 'https://github.com/FRED-2/OptiType'
    cmd.meta.function = "4-digit HLA-A/B/C typer"
    cmd.meta.desc = """
    OptiType is a novel HLA genotyping algorithm based on integer linear programming, 
    capable of producing accurate 4-digit HLA genotyping predictions from NGS data by simultaneously selecting all major and minor HLA Class I alleles.
    """
    cmd.runtime.image = 'fred2/optitype:latest'
    cmd.runtime.docker_cmd_prefix = 'docker run --rm --privileged -i --entrypoint /bin/bash --user root'
    cmd.runtime.tool = 'OptiTypePipeline.py'
    cmd.args['reads'] = Argument(prefix='--input ', type='infile', array=True, desc='fastq file(s) (fished or raw) or .bam files stored for re-use, generated by an earlier OptiType run.')
    cmd.args['is_dna'] = Argument(prefix='--dna', type='bool', default=True, desc='use with DNA sequencing data')
    cmd.args['is_rna'] = Argument(prefix='--rna', type='bool', default=False, desc='use with RNA sequencing data')
    cmd.args['enumerate'] = Argument(prefix='--enumerate ', type='int', default=1, desc='Number of enumerations. OptiType will output the optimal solution and the top N-1 suboptimal solutions in the results CSV.')
    cmd.args['outdir'] = Argument(prefix='--outdir ', default='.', desc='Specifies the out directory to which all files should be written.')
    cmd.args['prefix'] = Argument(prefix='--prefix ', default='sample', desc='prefix of output files')
    cmd.args['config'] = Argument(prefix='--config ', level='optional', desc='Path to config file. Default: config.ini in the same directory as this script')
    cmd.outputs['result_tsv'] = Output(value='{prefix}_result.tsv')
    cmd.outputs['result_pdf'] = Output(value='{prefix}_coverage_plot.pdf')
    return cmd


if __name__ == '__main__':
    # Workflow().to_cwl_tool(cmd=hisat_genotype(), write_out=True)
    optitype().run_on_terminal()

